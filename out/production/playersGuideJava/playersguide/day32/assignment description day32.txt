## Narrative 4: The Gift of Object Sight
As you place the finished Tic-Tac-Toe program onto the pedestal, writing etched into the stone walls
begins to glow reddish-orange. The glow is bright enough that you have to shield your eyes with your
hand for a moment before the glowing dims to a more manageable intensity.
Suddenly, you realize that you are no longer the only thing in the room. Thousands of faintly glowing,
bluish objects of various shapes and sizes float in the air around you.
You hear a resounding, booming voice echo through the chamber: “We are the Guardians of the
Catacombs. We have seen your creations and know that you are a True Programmer. We have deemed
you worthy of the Gift of Object Sight—the ability to see objects in code and requirements and craft
solutions from objects and types.
“We need your help. The Fountain of Objects—the lifeblood of this island—has been destroyed by the
vile Uncoded One. Use the Gift of Object Sight to reforge the Fountain of Objects. Without the Fountain,
this land will crumble and fade into oblivion. Object Sight will lead you to the Fountain. Depart now and
save this land!”
As you leave the Catacombs of the Class, you discover that your new Object Sight ability has made
countless code objects visible in the world around you. You also see a distinct trail, marked with a faint
blue line heading into the rugged, distant mountains where the Fountain of Objects supposedly lies.
Though the journey ahead is still long, the pathway to the Fountain of Objects is now clear!

## Day 32 Challenge: Packing Inventory
You know you have a long, dangerous journey ahead of you to travel to and repair the Fountain of
Objects. You decide to build some classes and objects to manage your inventory to prepare for the trip.
You decide to create a Pack class to help in holding your items. Each pack has three limits: the total
number of items it can hold, the weight it can carry, and the volume it can hold. Each item has a weight
and volume, and you must not overload a pack by adding too many items, too much weight, or too much
volume.
There are many item types that you might add to your inventory, each their own class in the inventory
system.
1. An arrow has a weight of 0.1 and a volume of 0.05.
2. A bow has a weight of 1 and a volume of 4.
3. Rope has a weight of 1 and a volume of 1.5.
4. Water has a weight of 2 and a volume of 3.
5. Food rations have a weight of 1 and a volume of 0.5.
6. A sword has a weight of 5 and a volume of 3.

**Objectives**:
- Create an InventoryItem class that represents any of the different item types. This class must
represent the item’s weight and volume, which it needs at creation time (constructor).
- Create derived classes for each of the types of items above. Each class should pass the correct weight
and volume to the base class constructor but should be creatable themselves with a parameterless
constructor (for example, new Rope() or new Sword()).
- Build a Pack class that can store an array of items. The total number of items, the maximum weight,
and the maximum volume are provided at creation time and cannot change afterward.
- Make a public bool add(InventoryItem item) method to Pack that allows you to add items
of any type to the pack’s contents. This method should fail (return false and not modify the pack’s
fields) if adding the item would cause it to exceed the pack’s item, weight, or volume limit.
- Add properties to Pack that allow it to report the current item count, weight, and volume, and the
limits of each.
- Create a program that creates a new pack and then allow the user to add (or attempt to add) items
chosen from a menu.

**To study if you find this difficult yet:**
- Inheritance in Java can be done via [extends](https://www.w3schools.com/java/ref_keyword_extends.asp)
- You may need to call the superclass constructor using [super](https://www.programiz.com/java-programming/super-keyword)